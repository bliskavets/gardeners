- name: Gather service facts
  service_facts:
- name: Check if Docker is running
  set_fact:
    docker_running: "{{ 'docker' in ansible_facts.services and ansible_facts.services['docker'].state == 'running' }}"
- name: Check if /docker is a mount point
  shell: mountpoint -q /docker
  register: docker_mount
  failed_when: docker_mount.rc != 0
  become: true
  changed_when: false
  ignore_errors: true
- name: Conditional tasks
  when: not docker_running and docker_mount.rc != 0
  block:
  - name: Register the name of the volume for docker later
    shell: >-
      lsblk | grep -E {{dedicated_docker_volume_lsblk_size}} | head -n1 | awk '{print $1;}'
    register: volume_name
  - debug: msg="Register the name of the volume for docker later as {{volume_name.stdout}}"
  - name: Assert that variable volume_name is not empty
    assert:
      that:
      - volume_name.stdout is defined
      - volume_name.stdout | length > 0

  - name: Stop docker in systemctl
    shell: systemctl stop docker
    become: yes
    ignore_errors: yes
    register: was_docker_stopped

  - name: Unmount /docker if mounted (ensure idempotency)
    shell: umount /docker
    become: yes
    ignore_errors: yes

  - name: Add GPT label to disks
    shell: parted /dev/{{ volume_name.stdout }} --script -- mklabel gpt
    become: yes

  - name: Add partition to disk which will take the entire size of the disk
    shell: parted /dev/{{ volume_name.stdout }} --script  -- mkpart primary 0% 100%
    become: yes

  - name: Register the name of the new created partition
    shell: >-
      lsblk | grep -E {{dedicated_docker_volume_lsblk_size}} | grep part | head -n1 | awk '{print $1;}' | cut -c 7-
    register: partition_name
  - debug: msg="Register the name of the new created partition as {{partition_name.stdout}}"

  - name: Add filesystem to partitions
    shell: mkfs.xfs -f -n ftype=1 /dev/{{ partition_name.stdout }}

  - name: Assure xfs ftype is set corretly
    shell: xfs_info /dev/{{ partition_name.stdout }} | grep "ftype=1"

  - name: Reboot the machine # To the best of our knowledge this is necessary on bare-metal machines but not on aws
    reboot:
    when: tags is not search("aws")

  - name: Unmount /docker if mounted (ensure idempotency) # To the best of our knowledge this is necessary on bare-metal machines but not on aws
    shell: umount /docker
    become: yes
    ignore_errors: yes
    when: tags is not search("aws")

  - name: Force Kernel to reread partitions
    shell: blockdev --rereadpt /dev/{{ volume_name.stdout }}

  - name: Reboot the machine # To the best of our knowledge this is necessary on bare-metal machines but not on aws
    reboot:
    when: tags is not search("aws")

  - name: Mount partition
    mount:
      path: /docker/
      src: /dev/{{ partition_name.stdout  }}
      state: mounted
      opts: pquota
      fstype: xfs

  - name: Reboot the machine
    reboot:

  - name: start docker in systemctl
    shell: systemctl start docker
    become: yes
    when: was_docker_stopped is success

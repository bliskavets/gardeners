- name: Ensure mokutil is installed
  apt:
    name: mokutil
    state: present
  become: yes

- name: Check if Secure Boot is enabled
  command: mokutil --sb-state
  register: secure_boot_status
  changed_when: False
  failed_when: "'SecureBoot enabled' in secure_boot_status.stdout"

- name: Show Secure Boot status
  debug:
    var: secure_boot_status.stdout_lines

- name: Add driver repo
  apt_repository:
    repo: ppa:graphics-drivers
    state: present
  become: yes

- name: Install graphic drivers
  apt:
    update_cache: yes
    name:
      - nvidia-driver-440
  register: installNvidiaGraphicsDriver

- name: Reboot the machine
  reboot:
  when: installNvidiaGraphicsDriver.changed

- name: Add nvidia GPT Key
  apt_key:
    url: https://nvidia.github.io/nvidia-docker/gpgkey
    state: present
  become: yes

- name: Download nvidia-docker.list
  get_url:
    url: "https://nvidia.github.io/nvidia-docker/ubuntu20.04/nvidia-docker.list"
    dest: "/etc/apt/sources.list.d/nvidia-docker.list"
    owner: root
    group: root
    mode: '0644'
  become: yes

- name: Install nvidia-docker
  apt:
    update_cache: yes
    name:
    - nvidia-docker2
  register: installNvidiaDocker

- name: Restart docker
  shell: systemctl restart docker
  retries: 3
  delay: 3
  register: result
  until: result.rc == 0
  when: installNvidiaDocker.changed

- name: Assert nvidia-smi command runs
  shell: nvidia-smi
  changed_when: False

- name: Assert CUDA works inside a docker container
  shell: docker run --rm --gpus all nvidia/cuda:11.6.2-base-ubuntu20.04 nvidia-smi
  changed_when: False

- name: Determine GPU RAM in MiB
  shell: echo $((-10+$(nvidia-smi -q -d MEMORY | grep Total | cut -d ":" -f2 | sort -h | tail -1 | cut -d " " -f2)))
  register: gpuram
  changed_when: False

- debug:
    msg: GPU RAM in MiB {{ gpuram.stdout }}

- name: Create /etc/systemd/system/docker.service.d folder
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: Add AIRAM configuration to /etc/systemd/system/docker.service.d
  template:
    src: scripts/nvidia-containers.conf.AIRAM.j2
    dest: /etc/systemd/system/docker.service.d/nvidia-containers.conf
  when:
   - tags is not search("VRAM")
   - tags is search("AIRAM")

- name: Add VRAM configuration to /etc/systemd/system/docker.service.d
  template:
    src: scripts/nvidia-containers.conf.VRAM.j2
    dest: /etc/systemd/system/docker.service.d/nvidia-containers.conf
  when:
   - tags is search("VRAM")
   - tags is not search("AIRAM")

- name: Add VRAM and AIRAM configuration to /etc/systemd/system/docker.service.d
  template:
    src: scripts/nvidia-containers.conf.VRAM_AIRAM.j2
    dest: /etc/systemd/system/docker.service.d/nvidia-containers.conf
  when:
   - tags is search("VRAM")
   - tags is search("AIRAM")

- name: Add configuration /etc/nvidia-container-runtime/config.tom
  copy:
    content: |
      swarm-resource = "DOCKER_RESOURCE_GPU"
    dest: /etc/nvidia-container-runtime/config.tom
    owner: root
    group: root
    mode: '0644'
  become: yes

- name: Read existing /etc/docker/daemon.json
  slurp:
    src: /etc/docker/daemon.json
  register: existing_daemon_json
  ignore_errors: yes

- name: Convert existing /etc/docker/daemon.json to dictionary
  set_fact:
    existing_daemon_json_dict: "{{ existing_daemon_json['content'] | b64decode | from_json }}"
  when: existing_daemon_json is success

- name: Add new configuration to existing /etc/docker/daemon.json
  set_fact:
    updated_daemon_json_dict: "{{ existing_daemon_json_dict | combine({'default-runtime': 'nvidia', 'runtimes': { 'nvidia': { 'path': '/usr/bin/nvidia-container-runtime', 'runtimeArgs': [] }}}, recursive=True) }}"

- name: Write updated /etc/docker/daemon.json
  copy:
    content: "{{ updated_daemon_json_dict | to_nice_json }}"
    dest: /etc/docker/daemon.json
  when: existing_daemon_json is success and updated_daemon_json_dict != existing_daemon_json_dict

- name: kill dockerd
  shell: pkill -SIGHUP dockerd

- name: Reload systemd manager configuration
  shell: systemctl daemon-reload

- name: Restart docker
  shell: systemctl restart docker
  register: docker_restarted_success
  until: docker_restarted_success is succeeded
  retries: 3
  delay: 7

- name: Check if the nvidia-smi check is functional and integrated in the bashrc
  shell: cat /home/ubuntu/.bashrc | grep nvidia-smi | wc -l
  register: test_nvidia_smi
  changed_when: False

- name: Add a nvidia-smi check after each reboot. If the test fails, a message will appear in the terminal.
  become: yes
  script: scripts/nvidia-smi_test.bash
  when: test_nvidia_smi.stdout == "0"
